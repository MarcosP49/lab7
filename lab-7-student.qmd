---
title: "Lab 7"
author: "Marcos Palominos"
---
For this lab, you will be joining and filtering related data sets to solve a murder mystery!

# Part 1: GitHub Workflow

At the top of the document (in the YAML) there is an `author` line that says 
`"Your name here!"`. Change this to be your name and save your file either by
clicking on the blue floppy disk or with a shortcut (command / control + s). 

Be sure to [commit the files to your repo](https://happygitwithr.com/existing-github-first#stage-and-commit). 

Let's get started!


# Part 2: Some Words of Advice

-   Set chunk options carefully.

-   Make sure you don't print out more output than you need.

-   Make sure you don't assign more objects than necessary---avoid "object junk"
in your environment.

-   Make your code readable and nicely formatted.

-   Think through your desired result **before** writing any code.

# Part 3: Finding the Killer

Northwestern University's Knight Lab wanted to help sharpen users' database
skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different
pieces of information pertinent to the crime - people, social media check-ins,
driver's licenses, crime scene reports, police interviews, and more!


## Access the Data

This code chunk will read in **all** of the tables of data for you. Don't modify or
remove this! Take some time to look at each file type so that 



```{r}
#| message: false
#| warning: false
#| label: read-in-data-and-packages

library(tidyverse)
library(stringr)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")
library(purrr)

source("https://raw.githubusercontent.com/jcanner/stat_210_2025_website/main/labs/instructions/lab-7-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!


**Step 1: Find the police report in `crime_scene_report`. Then used the information in the report to move on to the next data source based on the information learned.**

```{r}
#| label: Filter-crime-data
# Code for looking at the relevant crime scene report.
crime_scene_report_SQL <- crime_scene_report %>%
  filter(city == "SQL City", type == "murder", date == "20180115")
print(crime_scene_report_SQL$description)
```




**Next Steps: Follow the evidence to the person responsible for the murder, building a report as you go.**
There are accomplices, some knowingly and some unknowingly, but there is only one mastermind.


Solve the murder mystery, showing **all of your work in this document**. Your
document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the
tables manually. Functions from `stringr` and `lubridate` will also be useful.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

```{r}
#| label: Find-wanted
#First, find the wanted people in the person dataset
witness1 <- person %>%
  filter(address_street_name == "Franklin Ave", str_detect(name, "Annabel"))

witness2 <- person %>%
  filter(address_street_name == "Northwestern Dr") %>%
  slice_max(address_number, n = 1, with_ties = FALSE)

print(witness1)
print(witness2)
```

```{r}
#| label: Join-id-and-get-interviews
#Join person id to interview
person_interviews = left_join(person, interview, by = c("id" = "person_id"))

interview1 <- person_interviews %>%
  filter(id == 16371) %>%
  pull(transcript)
print(interview1)

interview2 <- person_interviews %>%
  filter(id == 14887) %>%
  pull(transcript)
print(interview2)
```



```{r}
#| label: Join-interviews-and-licenses
drivers_license <- drivers_license %>% rename(license_id = id)
get_fit_now_member <- get_fit_now_member %>% rename(member_id = id)

joined_data <- person_interviews %>%
  left_join(drivers_license, by = "license_id") %>%
  left_join(get_fit_now_member, by = "name") %>%
  left_join(get_fit_now_check_in, by = c("member_id" = "membership_id"))

mainSuspect <- joined_data %>%
  filter(
    membership_status == "gold",
    str_starts(member_id, "48Z"),
    str_detect(plate_number, "H42W"),
    check_in_date == "20180109"
  )

print(mainSuspect)
```



```{r}
#| label: Get-Jeremy-interview
suspect_interviews = person_interviews %>%
   filter(name == "Jeremy Bowers")
print(suspect_interviews$transcript)
# Red Tesla Model S, 65 or 67", SQL Symphony 3 Times Dec 2017
```

```{r}
#| label: Get-new-suspect
newSuspect <- joined_data %>%
  filter(
    height %in% c(65, 67),
    hair_color == "red",
    gender == "female"
  )

sql_checkins_filtered <- facebook_event_checkin %>%
  filter(
    str_detect(event_name, "SQL"),
    between(date, 20171201, 20171231)
  )

frequent_attendees <- sql_checkins_filtered %>%
  count(person_id) %>%
  filter(n >= 3)

sql_checkins_frequent <- sql_checkins_filtered %>%
  filter(person_id %in% frequent_attendees$person_id)

# Possible ID's: 24556, 99716

```

```{r}
#| label: Limit-suspects

finalSuspects <- person %>%
  filter(id == 24556 | id == 99716)
print(finalSuspects)
```


```{r}
#| label: Get-final-interviews

finalInterviews <- joined_data %>%
  filter(id == 24556 | id == 99716)
print(finalInterviews)
```


::: callout-note
## And the final suspect is...

*Miranda Priestly*
:::
